{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst HapticEngine = {\n  getEngine() {\n    var _a;\n\n    const win = window;\n    return win.TapticEngine || ((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Haptics')) && win.Capacitor.Plugins.Haptics;\n  },\n\n  available() {\n    var _a;\n\n    const win = window;\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return false;\n    }\n    /**\n     * Developers can manually import the\n     * Haptics plugin in their app which will cause\n     * getEngine to return the Haptics engine. However,\n     * the Haptics engine will throw an error if\n     * used in a web browser that does not support\n     * the Vibrate API. This check avoids that error\n     * if the browser does not support the Vibrate API.\n     */\n\n\n    if (((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.getPlatform()) === 'web') {\n      return typeof navigator !== 'undefined' && navigator.vibrate !== undefined;\n    }\n\n    return true;\n  },\n\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n\n  impact(options) {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({\n      style\n    });\n  },\n\n  notification(options) {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({\n      style\n    });\n  },\n\n  selection() {\n    this.impact({\n      style: 'light'\n    });\n  },\n\n  selectionStart() {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    } else {\n      engine.gestureSelectionStart();\n    }\n  },\n\n  selectionChanged() {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    } else {\n      engine.gestureSelectionChanged();\n    }\n  },\n\n  selectionEnd() {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    } else {\n      engine.gestureSelectionEnd();\n    }\n  }\n\n};\n/**\n * Check to see if the Haptic Plugin is available\n * @return Returns `true` or false if the plugin is available\n */\n\nconst hapticAvailable = () => {\n  return HapticEngine.available();\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\n\n\nconst hapticSelection = () => {\n  hapticAvailable() && HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\n\n\nconst hapticSelectionStart = () => {\n  hapticAvailable() && HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\n\n\nconst hapticSelectionChanged = () => {\n  hapticAvailable() && HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\n\n\nconst hapticSelectionEnd = () => {\n  hapticAvailable() && HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\n\n\nconst hapticImpact = options => {\n  hapticAvailable() && HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };","map":{"version":3,"names":["HapticEngine","getEngine","_a","win","window","TapticEngine","Capacitor","isPluginAvailable","Plugins","Haptics","available","engine","getPlatform","navigator","vibrate","undefined","isCordova","isCapacitor","impact","options","style","toUpperCase","notification","selection","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticAvailable","hapticSelection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","a","b","c","d","h"],"sources":["C:/Users/yeray/Desktop/Modulo3/PMDM/PMDM03/PMDM03T1/pmdm03-ejemplo2022-main/node_modules/@ionic/core/dist/esm/haptic-029a46f6.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst HapticEngine = {\n  getEngine() {\n    var _a;\n    const win = window;\n    return win.TapticEngine || (((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Haptics')) && win.Capacitor.Plugins.Haptics);\n  },\n  available() {\n    var _a;\n    const win = window;\n    const engine = this.getEngine();\n    if (!engine) {\n      return false;\n    }\n    /**\n     * Developers can manually import the\n     * Haptics plugin in their app which will cause\n     * getEngine to return the Haptics engine. However,\n     * the Haptics engine will throw an error if\n     * used in a web browser that does not support\n     * the Vibrate API. This check avoids that error\n     * if the browser does not support the Vibrate API.\n     */\n    if (((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.getPlatform()) === 'web') {\n      return typeof navigator !== 'undefined' && navigator.vibrate !== undefined;\n    }\n    return true;\n  },\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({ style });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({ style });\n  },\n  selection() {\n    this.impact({ style: 'light' });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    }\n    else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    }\n    else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    }\n    else {\n      engine.gestureSelectionEnd();\n    }\n  },\n};\n/**\n * Check to see if the Haptic Plugin is available\n * @return Returns `true` or false if the plugin is available\n */\nconst hapticAvailable = () => {\n  return HapticEngine.available();\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n  hapticAvailable() && HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n  hapticAvailable() && HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n  hapticAvailable() && HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n  hapticAvailable() && HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n  hapticAvailable() && HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
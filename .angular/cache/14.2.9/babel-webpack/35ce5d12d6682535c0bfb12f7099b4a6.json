{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Capacitor } from '@capacitor/core';\nimport { Filesystem, Directory } from '@capacitor/filesystem';\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"./gestion-storage.service\";\nexport let CamaraService = /*#__PURE__*/(() => {\n  class CamaraService {\n    constructor(platform, usarStorage) {\n      this.platform = platform;\n      this.usarStorage = usarStorage;\n      this.listaUrl = [];\n      this.listaPath = [];\n      this.loadSaved();\n    }\n\n    loadSaved() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Recupera los datos de Storage en formato string\n        const photoList = yield this.usarStorage.getObject(\"rutas\"); // Lo parsea a un array de objetos IFoto y lo almacena en el atributo accesoFotos\n        // Si no obtiene datos inicializará el array para poder empezar a almacenar fotos.\n\n        this.listaPath = JSON.parse(photoList.value) || []; // Se obtiene una URL válida para visualizar cada foto guardada en el sistema de archivos\n        // En los navegadores debemos cargar las imágenes en formato base64 para que se visualicen correctamente\n        // En los dispositivos podemos obtener la URL a partir del path\n\n        let webviewPath;\n\n        for (let photo of this.listaPath) {\n          if (!this.platform.is(\"hybrid\")) {\n            const readFile = yield Filesystem.readFile({\n              path: photo,\n              directory: Directory.Data\n            }); // La URL de la foto en base64 para que se pueda visualizar\n\n            webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n          } else {\n            webviewPath = Capacitor.convertFileSrc(photo);\n          }\n\n          this.listaUrl.push(webviewPath);\n        }\n      });\n    }\n\n    getListaUrl() {\n      return this.listaUrl;\n    }\n\n    sacarFoto() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const image = yield Camera.getPhoto({\n          quality: 90,\n          allowEditing: false,\n          resultType: CameraResultType.Base64,\n          source: CameraSource.Camera\n        }); // Guardamosla URL para visualizar la imagen añadiendo la cabecera base64\n\n        this.listaUrl.push(\"data:image/jpeg;base64,\" + image.base64String);\n        this.savePicture(image);\n      });\n    }\n\n    savePicture(image) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let base64Data = image.base64String; // Guarda el fichero\n\n        const fileName = new Date().getTime() + '.jpeg';\n        const savedFile = yield Filesystem.writeFile({\n          path: fileName,\n          data: base64Data,\n          directory: Directory.Data\n        }); // Si trabajamos con el navegador, guardamos solo el nombre del fichero. Lo necesitaremos para \n        // Con dispositivos móviles guardaremos la ruta que nos devuelve\n\n        let ruta;\n\n        if (this.platform.is('hybrid')) {\n          ruta = savedFile.uri;\n        } else {\n          ruta = fileName;\n        }\n\n        this.listaPath.push(ruta); // Almacenamos los datos de las fotos en Storage para poder acceder a ellas\n\n        this.usarStorage.setObject(\"rutas\", this.listaPath);\n      });\n    }\n\n  }\n\n  CamaraService.ɵfac = function CamaraService_Factory(t) {\n    return new (t || CamaraService)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.GestionStorageService));\n  };\n\n  CamaraService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CamaraService,\n    factory: CamaraService.ɵfac,\n    providedIn: 'root'\n  });\n  return CamaraService;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, EventEmitter, PLATFORM_ID, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Output, ViewChild, ContentChildren, HostBinding, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport Swiper from 'swiper';\nimport { Subject, of } from 'rxjs';\n/* underscore in name -> watch for changes */\n\nconst _c0 = [\"prevElRef\"];\nconst _c1 = [\"nextElRef\"];\nconst _c2 = [\"scrollbarElRef\"];\nconst _c3 = [\"paginationElRef\"];\n\nfunction SwiperComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"div\", 6, 7)(3, \"div\", 8, 9);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction SwiperComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 10, 11);\n  }\n}\n\nfunction SwiperComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 12, 13);\n  }\n}\n\nfunction SwiperComponent_6_ng_template_0_Template(rf, ctx) {}\n\nfunction SwiperComponent_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, SwiperComponent_6_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\n\nfunction SwiperComponent_7_ng_template_0_Template(rf, ctx) {}\n\nfunction SwiperComponent_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, SwiperComponent_7_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\n\nfunction SwiperComponent_8_ng_template_0_Template(rf, ctx) {}\n\nfunction SwiperComponent_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, SwiperComponent_8_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\n\nfunction SwiperComponent_ng_template_11_div_0_div_1_ng_template_1_Template(rf, ctx) {}\n\nconst _c4 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction SwiperComponent_ng_template_11_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, SwiperComponent_ng_template_11_div_0_div_1_ng_template_1_Template, 0, 0, \"ng-template\", 18);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const slide_r18 = i0.ɵɵnextContext().$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r19.zoomContainerClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", slide_r18.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(3, _c4, slide_r18.slideData));\n  }\n}\n\nfunction SwiperComponent_ng_template_11_div_0_ng_container_2_ng_template_1_Template(rf, ctx) {}\n\nfunction SwiperComponent_ng_template_11_div_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, SwiperComponent_ng_template_11_div_0_ng_container_2_ng_template_1_Template, 0, 0, \"ng-template\", 18);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const slide_r18 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", slide_r18.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c4, slide_r18.slideData));\n  }\n}\n\nfunction SwiperComponent_ng_template_11_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, SwiperComponent_ng_template_11_div_0_div_1_Template, 2, 5, \"div\", 16);\n    i0.ɵɵtemplate(2, SwiperComponent_ng_template_11_div_0_ng_container_2_Template, 2, 4, \"ng-container\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const slide_r18 = ctx.$implicit;\n    const slideKey_r16 = i0.ɵɵnextContext().key;\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r17.style);\n    i0.ɵɵproperty(\"ngClass\", (slide_r18.class ? slide_r18.class + \" \" : \"\") + ctx_r17.slideClass + (slideKey_r16 !== \"\" ? \" \" + ctx_r17.slideDuplicateClass : \"\"))(\"ngSwitch\", slide_r18.zoom);\n    i0.ɵɵattribute(\"data-swiper-slide-index\", slide_r18.virtualIndex ? slide_r18.virtualIndex : slide_r18.slideIndex)(\"data-swiper-autoplay\", slide_r18.autoplayDelay);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction SwiperComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, SwiperComponent_ng_template_11_div_0_Template, 3, 7, \"div\", 14);\n    i0.ɵɵpipe(1, \"async\");\n  }\n\n  if (rf & 2) {\n    const loopSlides_r15 = ctx.loopSlides;\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(1, 1, loopSlides_r15));\n  }\n}\n\nconst _c5 = [[[\"\", \"slot\", \"container-start\"]], [[\"\", \"slot\", \"wrapper-start\"]], [[\"\", \"slot\", \"wrapper-end\"]], [[\"\", \"slot\", \"container-end\"]]];\n\nconst _c6 = function (a0) {\n  return {\n    loopSlides: a0,\n    key: \"prepend\"\n  };\n};\n\nconst _c7 = function (a0) {\n  return {\n    loopSlides: a0,\n    key: \"\"\n  };\n};\n\nconst _c8 = function (a0) {\n  return {\n    loopSlides: a0,\n    key: \"append\"\n  };\n};\n\nconst _c9 = [\"[slot=container-start]\", \"[slot=wrapper-start]\", \"[slot=wrapper-end]\", \"[slot=container-end]\"];\nconst paramsList = ['init', 'enabled', '_direction', 'touchEventsTarget', 'initialSlide', '_speed', 'cssMode', 'updateOnWindowResize', 'resizeObserver', 'nested', 'focusableElements', '_width', '_height', 'preventInteractionOnTransition', 'userAgent', 'url', '_edgeSwipeDetection', '_edgeSwipeThreshold', '_freeMode', '_autoHeight', 'setWrapperSize', 'virtualTranslate', '_effect', 'breakpoints', '_spaceBetween', '_slidesPerView', 'maxBackfaceHiddenSlides', '_grid', '_slidesPerGroup', '_slidesPerGroupSkip', '_slidesPerGroupAuto', '_centeredSlides', '_centeredSlidesBounds', '_slidesOffsetBefore', '_slidesOffsetAfter', 'normalizeSlideIndex', '_centerInsufficientSlides', '_watchOverflow', 'roundLengths', 'touchRatio', 'touchAngle', 'simulateTouch', '_shortSwipes', '_longSwipes', 'longSwipesRatio', 'longSwipesMs', '_followFinger', 'allowTouchMove', '_threshold', 'touchMoveStopPropagation', 'touchStartPreventDefault', 'touchStartForcePreventDefault', 'touchReleaseOnEdges', 'uniqueNavElements', '_resistance', '_resistanceRatio', '_watchSlidesProgress', '_grabCursor', 'preventClicks', 'preventClicksPropagation', '_slideToClickedSlide', '_preloadImages', 'updateOnImagesReady', '_loop', '_loopAdditionalSlides', '_loopedSlides', '_loopedSlidesLimit', '_loopFillGroupWithBlank', 'loopPreventsSlide', '_rewind', '_allowSlidePrev', '_allowSlideNext', '_swipeHandler', '_noSwiping', 'noSwipingClass', 'noSwipingSelector', 'passiveListeners', 'containerModifierClass', 'slideClass', 'slideBlankClass', 'slideActiveClass', 'slideDuplicateActiveClass', 'slideVisibleClass', 'slideDuplicateClass', 'slideNextClass', 'slideDuplicateNextClass', 'slidePrevClass', 'slideDuplicatePrevClass', 'wrapperClass', 'runCallbacksOnInit', 'observer', 'observeParents', 'observeSlideChildren', // modules\n'a11y', 'autoplay', '_controller', 'coverflowEffect', 'cubeEffect', 'fadeEffect', 'flipEffect', 'creativeEffect', 'cardsEffect', 'hashNavigation', 'history', 'keyboard', 'lazy', 'mousewheel', '_navigation', '_pagination', 'parallax', '_scrollbar', '_thumbs', 'virtual', 'zoom', 'on'];\n\nfunction isObject(o) {\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n}\n\nfunction isEnabled(val) {\n  return typeof val !== 'undefined' && typeof val !== 'boolean' && val.enabled === true;\n}\n\nfunction isShowEl(val, obj, el) {\n  return coerceBooleanProperty(val) === true && obj && !obj.el || !(typeof obj !== 'boolean' && obj.el !== (el === null || el === void 0 ? void 0 : el.nativeElement) && (typeof obj.el === 'string' || typeof obj.el === 'object'));\n}\n\nfunction extend(target, src) {\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\n  Object.keys(src).filter(key => noExtend.indexOf(key) < 0).forEach(key => {\n    if (typeof target[key] === 'undefined') {\n      target[key] = src[key];\n      return;\n    }\n\n    if (target[key] && !src[key]) {\n      return;\n    }\n\n    if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n      if (src[key].__swiper__) target[key] = src[key];else extend(target[key], src[key]);\n    } else {\n      target[key] = src[key];\n    }\n  });\n}\n\nfunction coerceBooleanProperty(value) {\n  return value != null && `${value}` !== 'false';\n}\n\nconst ignoreNgOnChanges = ['pagination', 'navigation', 'scrollbar', 'virtual'];\n\nfunction setProperty(val, obj = {}) {\n  if (isObject(val)) {\n    return val;\n  }\n\n  if (coerceBooleanProperty(val) === true) {\n    return obj;\n  }\n\n  return false;\n} // @ts-ignore\n\n\nconst allowedParams = paramsList.map(key => key.replace(/_/, ''));\n\nfunction getParams(obj = {}) {\n  const params = {\n    on: {}\n  }; // const events = {};\n\n  const passedParams = {};\n  extend(params, Swiper.defaults);\n  extend(params, Swiper.extendedDefaults);\n  params._emitClasses = true;\n  params.init = false;\n  const rest = {};\n  const allowedParams = paramsList.map(key => key.replace(/_/, ''));\n  Object.keys(obj).forEach(key => {\n    const _key = key.replace(/^_/, '');\n\n    if (allowedParams.indexOf(_key) >= 0) {\n      if (isObject(obj[key])) {\n        params[_key] = {};\n        passedParams[_key] = {};\n        extend(params[_key], obj[key]);\n        extend(passedParams[_key], obj[key]);\n      } else {\n        params[_key] = obj[key];\n        passedParams[_key] = obj[key];\n      }\n    } // else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === 'function') {\n    //   events[`${_key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n    // }\n    else {\n      rest[_key] = obj[key];\n    }\n  });\n  ['navigation', 'pagination', 'scrollbar'].forEach(key => {\n    if (params[key] === true) params[key] = {};\n    if (params[key] === false) delete params[key];\n  });\n  return {\n    params,\n    passedParams,\n    rest\n  };\n}\n\nlet SwiperSlideDirective = /*#__PURE__*/(() => {\n  class SwiperSlideDirective {\n    constructor(template) {\n      this.template = template;\n      this.class = '';\n      this.autoplayDelay = null;\n      this.slideData = {\n        isActive: false,\n        isPrev: false,\n        isNext: false,\n        isVisible: false,\n        isDuplicate: false\n      };\n    }\n\n    set ngClass(val) {\n      this.class = [this.class || '', val].join(' ');\n    }\n\n    set zoom(val) {\n      this._zoom = coerceBooleanProperty(val);\n    }\n\n    get zoom() {\n      return this._zoom;\n    }\n\n    get classNames() {\n      return this._classNames;\n    }\n\n    set classNames(val) {\n      if (this._classNames === val) {\n        return;\n      }\n\n      this._classNames = val;\n      this.slideData = {\n        isActive: this._hasClass(['swiper-slide-active', 'swiper-slide-duplicate-active']),\n        isVisible: this._hasClass(['swiper-slide-visible']),\n        isDuplicate: this._hasClass(['swiper-slide-duplicate']),\n        isPrev: this._hasClass(['swiper-slide-prev', 'swiper-slide-duplicate-prev']),\n        isNext: this._hasClass(['swiper-slide-next', 'swiper-slide-duplicate-next'])\n      };\n    }\n\n    _hasClass(classNames) {\n      return classNames.some(className => this._classNames.indexOf(className) >= 0);\n    }\n\n  }\n\n  SwiperSlideDirective.ɵfac = function SwiperSlideDirective_Factory(t) {\n    return new (t || SwiperSlideDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n\n  SwiperSlideDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: SwiperSlideDirective,\n    selectors: [[\"ng-template\", \"swiperSlide\", \"\"]],\n    inputs: {\n      virtualIndex: \"virtualIndex\",\n      class: \"class\",\n      ngClass: \"ngClass\",\n      autoplayDelay: [\"data-swiper-autoplay\", \"autoplayDelay\"],\n      zoom: \"zoom\"\n    }\n  });\n  return SwiperSlideDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SwiperComponent = /*#__PURE__*/(() => {\n  class SwiperComponent {\n    constructor(_ngZone, elementRef, _changeDetectorRef, _platformId) {\n      this._ngZone = _ngZone;\n      this.elementRef = elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._platformId = _platformId;\n      this.slideClass = 'swiper-slide';\n      this.wrapperClass = 'swiper-wrapper';\n      this.showNavigation = true;\n      this.showPagination = true;\n      this.showScrollbar = true;\n      this.s__beforeBreakpoint = new EventEmitter();\n      this.s__containerClasses = new EventEmitter();\n      this.s__slideClass = new EventEmitter();\n      this.s__swiper = new EventEmitter();\n      this.s_activeIndexChange = new EventEmitter();\n      this.s_afterInit = new EventEmitter();\n      this.s_autoplay = new EventEmitter();\n      this.s_autoplayStart = new EventEmitter();\n      this.s_autoplayStop = new EventEmitter();\n      this.s_autoplayPause = new EventEmitter();\n      this.s_autoplayResume = new EventEmitter();\n      this.s_beforeDestroy = new EventEmitter();\n      this.s_beforeInit = new EventEmitter();\n      this.s_beforeLoopFix = new EventEmitter();\n      this.s_beforeResize = new EventEmitter();\n      this.s_beforeSlideChangeStart = new EventEmitter();\n      this.s_beforeTransitionStart = new EventEmitter();\n      this.s_breakpoint = new EventEmitter();\n      this.s_changeDirection = new EventEmitter();\n      this.s_click = new EventEmitter();\n      this.s_doubleTap = new EventEmitter();\n      this.s_doubleClick = new EventEmitter();\n      this.s_destroy = new EventEmitter();\n      this.s_fromEdge = new EventEmitter();\n      this.s_hashChange = new EventEmitter();\n      this.s_hashSet = new EventEmitter();\n      this.s_imagesReady = new EventEmitter();\n      this.s_init = new EventEmitter();\n      this.s_keyPress = new EventEmitter();\n      this.s_lazyImageLoad = new EventEmitter();\n      this.s_lazyImageReady = new EventEmitter();\n      this.s_loopFix = new EventEmitter();\n      this.s_momentumBounce = new EventEmitter();\n      this.s_navigationHide = new EventEmitter();\n      this.s_navigationShow = new EventEmitter();\n      this.s_navigationPrev = new EventEmitter();\n      this.s_navigationNext = new EventEmitter();\n      this.s_observerUpdate = new EventEmitter();\n      this.s_orientationchange = new EventEmitter();\n      this.s_paginationHide = new EventEmitter();\n      this.s_paginationRender = new EventEmitter();\n      this.s_paginationShow = new EventEmitter();\n      this.s_paginationUpdate = new EventEmitter();\n      this.s_progress = new EventEmitter();\n      this.s_reachBeginning = new EventEmitter();\n      this.s_reachEnd = new EventEmitter();\n      this.s_realIndexChange = new EventEmitter();\n      this.s_resize = new EventEmitter();\n      this.s_scroll = new EventEmitter();\n      this.s_scrollbarDragEnd = new EventEmitter();\n      this.s_scrollbarDragMove = new EventEmitter();\n      this.s_scrollbarDragStart = new EventEmitter();\n      this.s_setTransition = new EventEmitter();\n      this.s_setTranslate = new EventEmitter();\n      this.s_slideChange = new EventEmitter();\n      this.s_slideChangeTransitionEnd = new EventEmitter();\n      this.s_slideChangeTransitionStart = new EventEmitter();\n      this.s_slideNextTransitionEnd = new EventEmitter();\n      this.s_slideNextTransitionStart = new EventEmitter();\n      this.s_slidePrevTransitionEnd = new EventEmitter();\n      this.s_slidePrevTransitionStart = new EventEmitter();\n      this.s_slideResetTransitionStart = new EventEmitter();\n      this.s_slideResetTransitionEnd = new EventEmitter();\n      this.s_sliderMove = new EventEmitter();\n      this.s_sliderFirstMove = new EventEmitter();\n      this.s_slidesLengthChange = new EventEmitter();\n      this.s_slidesGridLengthChange = new EventEmitter();\n      this.s_snapGridLengthChange = new EventEmitter();\n      this.s_snapIndexChange = new EventEmitter();\n      this.s_tap = new EventEmitter();\n      this.s_toEdge = new EventEmitter();\n      this.s_touchEnd = new EventEmitter();\n      this.s_touchMove = new EventEmitter();\n      this.s_touchMoveOpposite = new EventEmitter();\n      this.s_touchStart = new EventEmitter();\n      this.s_transitionEnd = new EventEmitter();\n      this.s_transitionStart = new EventEmitter();\n      this.s_update = new EventEmitter();\n      this.s_zoomChange = new EventEmitter();\n      this.s_swiper = new EventEmitter();\n      this.s_lock = new EventEmitter();\n      this.s_unlock = new EventEmitter();\n      this._activeSlides = new Subject();\n      this.containerClasses = 'swiper';\n\n      this.slidesChanges = val => {\n        this.slides = val.map((slide, index) => {\n          slide.slideIndex = index;\n          slide.classNames = this.slideClass || '';\n          return slide;\n        });\n\n        if (this.loop && !this.loopedSlides) {\n          this.calcLoopedSlides();\n        }\n\n        if (!this.virtual) {\n          if (this.loopedSlides) {\n            this.prependSlides = of(this.slides.slice(this.slides.length - this.loopedSlides));\n            this.appendSlides = of(this.slides.slice(0, this.loopedSlides));\n          }\n        } else if (this.swiperRef && this.swiperRef.virtual) {\n          this._ngZone.runOutsideAngular(() => {\n            this.swiperRef.virtual.slides = this.slides;\n            this.swiperRef.virtual.update(true);\n          });\n        }\n\n        this._changeDetectorRef.detectChanges();\n      };\n\n      this.style = null;\n\n      this.updateVirtualSlides = virtualData => {\n        // TODO: type virtualData\n        if (!this.swiperRef || this.currentVirtualData && this.currentVirtualData.from === virtualData.from && this.currentVirtualData.to === virtualData.to && this.currentVirtualData.offset === virtualData.offset) {\n          return;\n        }\n\n        this.style = this.swiperRef.isHorizontal() ? {\n          [this.swiperRef.rtlTranslate ? 'right' : 'left']: `${virtualData.offset}px`\n        } : {\n          top: `${virtualData.offset}px`\n        };\n        this.currentVirtualData = virtualData;\n\n        this._activeSlides.next(virtualData.slides);\n\n        this._ngZone.run(() => {\n          this._changeDetectorRef.detectChanges();\n        });\n\n        this._ngZone.runOutsideAngular(() => {\n          this.swiperRef.updateSlides();\n          this.swiperRef.updateProgress();\n          this.swiperRef.updateSlidesClasses();\n\n          if (isEnabled(this.swiperRef.params.lazy)) {\n            this.swiperRef.lazy.load();\n          }\n\n          this.swiperRef.virtual.update(true);\n        });\n\n        return;\n      };\n    }\n\n    set navigation(val) {\n      var _a, _b, _c;\n\n      const currentNext = typeof this._navigation !== 'boolean' && this._navigation !== '' ? (_a = this._navigation) === null || _a === void 0 ? void 0 : _a.nextEl : null;\n      const currentPrev = typeof this._navigation !== 'boolean' && this._navigation !== '' ? (_b = this._navigation) === null || _b === void 0 ? void 0 : _b.prevEl : null;\n      this._navigation = setProperty(val, {\n        nextEl: currentNext || null,\n        prevEl: currentPrev || null\n      });\n      this.showNavigation = !(coerceBooleanProperty(val) !== true || this._navigation && typeof this._navigation !== 'boolean' && this._navigation.prevEl !== ((_c = this._prevElRef) === null || _c === void 0 ? void 0 : _c.nativeElement) && (this._navigation.prevEl !== null || this._navigation.nextEl !== null) && (typeof this._navigation.nextEl === 'string' || typeof this._navigation.prevEl === 'string' || typeof this._navigation.nextEl === 'object' || typeof this._navigation.prevEl === 'object'));\n    }\n\n    get navigation() {\n      return this._navigation;\n    }\n\n    set pagination(val) {\n      var _a;\n\n      const current = typeof this._pagination !== 'boolean' && this._pagination !== '' ? (_a = this._pagination) === null || _a === void 0 ? void 0 : _a.el : null;\n      this._pagination = setProperty(val, {\n        el: current || null\n      });\n      this.showPagination = isShowEl(val, this._pagination, this._paginationElRef);\n    }\n\n    get pagination() {\n      return this._pagination;\n    }\n\n    set scrollbar(val) {\n      var _a;\n\n      const current = typeof this._scrollbar !== 'boolean' && this._scrollbar !== '' ? (_a = this._scrollbar) === null || _a === void 0 ? void 0 : _a.el : null;\n      this._scrollbar = setProperty(val, {\n        el: current || null\n      });\n      this.showScrollbar = isShowEl(val, this._scrollbar, this._scrollbarElRef);\n    }\n\n    get scrollbar() {\n      return this._scrollbar;\n    }\n\n    set virtual(val) {\n      this._virtual = setProperty(val);\n    }\n\n    get virtual() {\n      return this._virtual;\n    }\n\n    set config(val) {\n      this.updateSwiper(val);\n      const {\n        params\n      } = getParams(val);\n      Object.assign(this, params);\n    }\n\n    set prevElRef(el) {\n      this._prevElRef = el;\n\n      this._setElement(el, this.navigation, 'navigation', 'prevEl');\n    }\n\n    set nextElRef(el) {\n      this._nextElRef = el;\n\n      this._setElement(el, this.navigation, 'navigation', 'nextEl');\n    }\n\n    set scrollbarElRef(el) {\n      this._scrollbarElRef = el;\n\n      this._setElement(el, this.scrollbar, 'scrollbar');\n    }\n\n    set paginationElRef(el) {\n      this._paginationElRef = el;\n\n      this._setElement(el, this.pagination, 'pagination');\n    }\n\n    get activeSlides() {\n      if (this.virtual) {\n        return this._activeSlides;\n      }\n\n      return of(this.slides);\n    }\n\n    get zoomContainerClass() {\n      return this.zoom && typeof this.zoom !== 'boolean' ? this.zoom.containerClass : 'swiper-zoom-container';\n    }\n\n    _setElement(el, ref, update, key = 'el') {\n      if (!ref || !el) return;\n\n      if (el.nativeElement) {\n        if (ref[key] === el.nativeElement) {\n          return;\n        }\n\n        ref[key] = el.nativeElement;\n      }\n\n      const updateObj = {};\n      updateObj[update] = true;\n      this.updateInitSwiper(updateObj);\n    }\n\n    ngOnInit() {\n      const {\n        params\n      } = getParams(this);\n      Object.assign(this, params);\n    }\n\n    ngAfterViewInit() {\n      this.childrenSlidesInit();\n      this.initSwiper();\n\n      this._changeDetectorRef.detectChanges();\n\n      setTimeout(() => {\n        this.s_swiper.emit(this.swiperRef);\n      });\n    }\n\n    childrenSlidesInit() {\n      this.slidesChanges(this.slidesEl);\n      this.slidesEl.changes.subscribe(this.slidesChanges);\n    }\n\n    get isSwiperActive() {\n      return this.swiperRef && !this.swiperRef.destroyed;\n    }\n\n    initSwiper() {\n      const {\n        params: swiperParams,\n        passedParams\n      } = getParams(this);\n      Object.assign(this, swiperParams);\n\n      this._ngZone.runOutsideAngular(() => {\n        swiperParams.init = false;\n\n        if (!swiperParams.virtual) {\n          swiperParams.observer = true;\n        }\n\n        swiperParams.onAny = (eventName, ...args) => {\n          const emitter = this['s_' + eventName];\n\n          if (emitter) {\n            emitter.emit([...args]);\n          }\n        };\n\n        const _slideClasses = (_, updated) => {\n          updated.forEach(({\n            slideEl,\n            classNames\n          }, index) => {\n            const dataIndex = slideEl.getAttribute('data-swiper-slide-index');\n            const slideIndex = dataIndex ? parseInt(dataIndex) : index;\n\n            if (this.virtual) {\n              const virtualSlide = this.slides.find(item => {\n                return item.virtualIndex && item.virtualIndex === slideIndex;\n              });\n\n              if (virtualSlide) {\n                virtualSlide.classNames = classNames;\n                return;\n              }\n            }\n\n            if (this.slides[slideIndex]) {\n              this.slides[slideIndex].classNames = classNames;\n            }\n          });\n\n          this._changeDetectorRef.detectChanges();\n        };\n\n        const _containerClasses = (_, classes) => {\n          setTimeout(() => {\n            this.containerClasses = classes;\n          });\n        };\n\n        Object.assign(swiperParams.on, {\n          _containerClasses,\n          _slideClasses\n        });\n        const swiperRef = new Swiper(swiperParams);\n\n        swiperRef.loopCreate = () => {};\n\n        swiperRef.loopDestroy = () => {};\n\n        if (swiperParams.loop) {\n          swiperRef.loopedSlides = this.loopedSlides;\n        }\n\n        const isVirtualEnabled = isEnabled(swiperRef.params.virtual);\n\n        if (swiperRef.virtual && isVirtualEnabled) {\n          swiperRef.virtual.slides = this.slides;\n          const extendWith = {\n            cache: false,\n            slides: this.slides,\n            renderExternal: this.updateVirtualSlides,\n            renderExternalUpdate: false\n          };\n          extend(swiperRef.params.virtual, extendWith);\n          extend(swiperRef.originalParams.virtual, extendWith);\n        }\n\n        if (isPlatformBrowser(this._platformId)) {\n          this.swiperRef = swiperRef.init(this.elementRef.nativeElement);\n          const isVirtualEnabled = isEnabled(this.swiperRef.params.virtual);\n\n          if (this.swiperRef.virtual && isVirtualEnabled) {\n            this.swiperRef.virtual.update(true);\n          }\n\n          this._changeDetectorRef.detectChanges();\n        }\n      });\n    }\n\n    ngOnChanges(changedParams) {\n      this.updateSwiper(changedParams);\n\n      this._changeDetectorRef.detectChanges();\n    }\n\n    updateInitSwiper(changedParams) {\n      if (!(changedParams && this.swiperRef && !this.swiperRef.destroyed)) {\n        return;\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        const {\n          params: currentParams,\n          pagination,\n          navigation,\n          scrollbar,\n          virtual,\n          thumbs\n        } = this.swiperRef;\n\n        if (changedParams.pagination) {\n          if (this.pagination && typeof this.pagination !== 'boolean' && this.pagination.el && pagination && !pagination.el) {\n            this.updateParameter('pagination', this.pagination);\n            pagination.init();\n            pagination.render();\n            pagination.update();\n          } else {\n            pagination.destroy();\n            pagination.el = null;\n          }\n        }\n\n        if (changedParams.scrollbar) {\n          if (this.scrollbar && typeof this.scrollbar !== 'boolean' && this.scrollbar.el && scrollbar && !scrollbar.el) {\n            this.updateParameter('scrollbar', this.scrollbar);\n            scrollbar.init();\n            scrollbar.updateSize();\n            scrollbar.setTranslate();\n          } else {\n            scrollbar.destroy();\n            scrollbar.el = null;\n          }\n        }\n\n        if (changedParams.navigation) {\n          if (this.navigation && typeof this.navigation !== 'boolean' && this.navigation.prevEl && this.navigation.nextEl && navigation && !navigation.prevEl && !navigation.nextEl) {\n            this.updateParameter('navigation', this.navigation);\n            navigation.init();\n            navigation.update();\n          } else if (navigation.prevEl && navigation.nextEl) {\n            navigation.destroy();\n            navigation.nextEl = null;\n            navigation.prevEl = null;\n          }\n        }\n\n        if (changedParams.thumbs && this.thumbs && this.thumbs.swiper) {\n          this.updateParameter('thumbs', this.thumbs);\n          const initialized = thumbs.init();\n          if (initialized) thumbs.update(true);\n        }\n\n        if (changedParams.controller && this.controller && this.controller.control) {\n          this.swiperRef.controller.control = this.controller.control;\n        }\n\n        this.swiperRef.update();\n      });\n    }\n\n    updateSwiper(changedParams) {\n      this._ngZone.runOutsideAngular(() => {\n        var _a, _b;\n\n        if (changedParams.config) {\n          return;\n        }\n\n        if (!(changedParams && this.swiperRef && !this.swiperRef.destroyed)) {\n          return;\n        }\n\n        for (const key in changedParams) {\n          if (ignoreNgOnChanges.indexOf(key) >= 0) {\n            continue;\n          }\n\n          const newValue = (_b = (_a = changedParams[key]) === null || _a === void 0 ? void 0 : _a.currentValue) !== null && _b !== void 0 ? _b : changedParams[key];\n          this.updateParameter(key, newValue);\n        }\n\n        if (changedParams.allowSlideNext) {\n          this.swiperRef.allowSlideNext = this.allowSlideNext;\n        }\n\n        if (changedParams.allowSlidePrev) {\n          this.swiperRef.allowSlidePrev = this.allowSlidePrev;\n        }\n\n        if (changedParams.direction) {\n          this.swiperRef.changeDirection(this.direction, false);\n        }\n\n        if (changedParams.breakpoints) {\n          if (this.loop && !this.loopedSlides) {\n            this.calcLoopedSlides();\n          }\n\n          this.swiperRef.currentBreakpoint = null;\n          this.swiperRef.setBreakpoint();\n        }\n\n        if (changedParams.thumbs || changedParams.controller) {\n          this.updateInitSwiper(changedParams);\n        }\n\n        this.swiperRef.update();\n      });\n    }\n\n    calcLoopedSlides() {\n      if (!this.loop) {\n        return false;\n      }\n\n      let slidesPerViewParams = this.slidesPerView;\n\n      if (this.breakpoints) {\n        const breakpoint = Swiper.prototype.getBreakpoint(this.breakpoints);\n        const breakpointOnlyParams = breakpoint in this.breakpoints ? this.breakpoints[breakpoint] : undefined;\n\n        if (breakpointOnlyParams && breakpointOnlyParams.slidesPerView) {\n          slidesPerViewParams = breakpointOnlyParams.slidesPerView;\n        }\n      }\n\n      if (slidesPerViewParams === 'auto') {\n        this.loopedSlides = this.slides.length;\n        return this.slides.length;\n      }\n\n      let loopedSlides = this.loopedSlides || slidesPerViewParams;\n\n      if (!loopedSlides) {\n        // ?\n        return false;\n      }\n\n      if (this.loopAdditionalSlides) {\n        loopedSlides += this.loopAdditionalSlides;\n      }\n\n      if (loopedSlides > this.slides.length) {\n        loopedSlides = this.slides.length;\n      }\n\n      this.loopedSlides = loopedSlides;\n      return true;\n    }\n\n    updateParameter(key, value) {\n      if (!(this.swiperRef && !this.swiperRef.destroyed)) {\n        return;\n      }\n\n      const _key = key.replace(/^_/, '');\n\n      const isCurrentParamObj = isObject(this.swiperRef.params[_key]);\n\n      if (_key === 'enabled') {\n        if (value === true) {\n          this.swiperRef.enable();\n        } else if (value === false) {\n          this.swiperRef.disable();\n        }\n\n        return;\n      }\n\n      if (isCurrentParamObj && isObject(value)) {\n        extend(this.swiperRef.params[_key], value);\n      } else {\n        this.swiperRef.params[_key] = value;\n      }\n    }\n\n    ngOnDestroy() {\n      this._ngZone.runOutsideAngular(() => {\n        var _a;\n\n        (_a = this.swiperRef) === null || _a === void 0 ? void 0 : _a.destroy(true, false);\n      });\n    }\n\n  }\n\n  SwiperComponent.ɵfac = function SwiperComponent_Factory(t) {\n    return new (t || SwiperComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  SwiperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SwiperComponent,\n    selectors: [[\"swiper\"], [\"\", \"swiper\", \"\"]],\n    contentQueries: function SwiperComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, SwiperSlideDirective, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slidesEl = _t);\n      }\n    },\n    viewQuery: function SwiperComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.prevElRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nextElRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollbarElRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginationElRef = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function SwiperComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.containerClasses);\n      }\n    },\n    inputs: {\n      enabled: \"enabled\",\n      on: \"on\",\n      direction: \"direction\",\n      touchEventsTarget: \"touchEventsTarget\",\n      initialSlide: \"initialSlide\",\n      speed: \"speed\",\n      cssMode: \"cssMode\",\n      updateOnWindowResize: \"updateOnWindowResize\",\n      resizeObserver: \"resizeObserver\",\n      nested: \"nested\",\n      focusableElements: \"focusableElements\",\n      width: \"width\",\n      height: \"height\",\n      preventInteractionOnTransition: \"preventInteractionOnTransition\",\n      userAgent: \"userAgent\",\n      url: \"url\",\n      edgeSwipeDetection: \"edgeSwipeDetection\",\n      edgeSwipeThreshold: \"edgeSwipeThreshold\",\n      freeMode: \"freeMode\",\n      autoHeight: \"autoHeight\",\n      setWrapperSize: \"setWrapperSize\",\n      virtualTranslate: \"virtualTranslate\",\n      effect: \"effect\",\n      breakpoints: \"breakpoints\",\n      spaceBetween: \"spaceBetween\",\n      slidesPerView: \"slidesPerView\",\n      maxBackfaceHiddenSlides: \"maxBackfaceHiddenSlides\",\n      grid: \"grid\",\n      slidesPerGroup: \"slidesPerGroup\",\n      slidesPerGroupSkip: \"slidesPerGroupSkip\",\n      centeredSlides: \"centeredSlides\",\n      centeredSlidesBounds: \"centeredSlidesBounds\",\n      slidesOffsetBefore: \"slidesOffsetBefore\",\n      slidesOffsetAfter: \"slidesOffsetAfter\",\n      normalizeSlideIndex: \"normalizeSlideIndex\",\n      centerInsufficientSlides: \"centerInsufficientSlides\",\n      watchOverflow: \"watchOverflow\",\n      roundLengths: \"roundLengths\",\n      touchRatio: \"touchRatio\",\n      touchAngle: \"touchAngle\",\n      simulateTouch: \"simulateTouch\",\n      shortSwipes: \"shortSwipes\",\n      longSwipes: \"longSwipes\",\n      longSwipesRatio: \"longSwipesRatio\",\n      longSwipesMs: \"longSwipesMs\",\n      followFinger: \"followFinger\",\n      allowTouchMove: \"allowTouchMove\",\n      threshold: \"threshold\",\n      touchMoveStopPropagation: \"touchMoveStopPropagation\",\n      touchStartPreventDefault: \"touchStartPreventDefault\",\n      touchStartForcePreventDefault: \"touchStartForcePreventDefault\",\n      touchReleaseOnEdges: \"touchReleaseOnEdges\",\n      uniqueNavElements: \"uniqueNavElements\",\n      resistance: \"resistance\",\n      resistanceRatio: \"resistanceRatio\",\n      watchSlidesProgress: \"watchSlidesProgress\",\n      grabCursor: \"grabCursor\",\n      preventClicks: \"preventClicks\",\n      preventClicksPropagation: \"preventClicksPropagation\",\n      slideToClickedSlide: \"slideToClickedSlide\",\n      preloadImages: \"preloadImages\",\n      updateOnImagesReady: \"updateOnImagesReady\",\n      loop: \"loop\",\n      loopAdditionalSlides: \"loopAdditionalSlides\",\n      loopedSlides: \"loopedSlides\",\n      loopedSlidesLimit: \"loopedSlidesLimit\",\n      loopFillGroupWithBlank: \"loopFillGroupWithBlank\",\n      loopPreventsSlide: \"loopPreventsSlide\",\n      rewind: \"rewind\",\n      allowSlidePrev: \"allowSlidePrev\",\n      allowSlideNext: \"allowSlideNext\",\n      swipeHandler: \"swipeHandler\",\n      noSwiping: \"noSwiping\",\n      noSwipingClass: \"noSwipingClass\",\n      noSwipingSelector: \"noSwipingSelector\",\n      passiveListeners: \"passiveListeners\",\n      containerModifierClass: \"containerModifierClass\",\n      slideClass: \"slideClass\",\n      slideBlankClass: \"slideBlankClass\",\n      slideActiveClass: \"slideActiveClass\",\n      slideDuplicateActiveClass: \"slideDuplicateActiveClass\",\n      slideVisibleClass: \"slideVisibleClass\",\n      slideDuplicateClass: \"slideDuplicateClass\",\n      slideNextClass: \"slideNextClass\",\n      slideDuplicateNextClass: \"slideDuplicateNextClass\",\n      slidePrevClass: \"slidePrevClass\",\n      slideDuplicatePrevClass: \"slideDuplicatePrevClass\",\n      wrapperClass: \"wrapperClass\",\n      runCallbacksOnInit: \"runCallbacksOnInit\",\n      observeParents: \"observeParents\",\n      observeSlideChildren: \"observeSlideChildren\",\n      a11y: \"a11y\",\n      autoplay: \"autoplay\",\n      controller: \"controller\",\n      coverflowEffect: \"coverflowEffect\",\n      cubeEffect: \"cubeEffect\",\n      fadeEffect: \"fadeEffect\",\n      flipEffect: \"flipEffect\",\n      creativeEffect: \"creativeEffect\",\n      cardsEffect: \"cardsEffect\",\n      hashNavigation: \"hashNavigation\",\n      history: \"history\",\n      keyboard: \"keyboard\",\n      lazy: \"lazy\",\n      mousewheel: \"mousewheel\",\n      parallax: \"parallax\",\n      thumbs: \"thumbs\",\n      zoom: \"zoom\",\n      slidesPerGroupAuto: \"slidesPerGroupAuto\",\n      class: \"class\",\n      id: \"id\",\n      navigation: \"navigation\",\n      pagination: \"pagination\",\n      scrollbar: \"scrollbar\",\n      virtual: \"virtual\",\n      config: \"config\"\n    },\n    outputs: {\n      s__beforeBreakpoint: \"_beforeBreakpoint\",\n      s__containerClasses: \"_containerClasses\",\n      s__slideClass: \"_slideClass\",\n      s__swiper: \"_swiper\",\n      s_activeIndexChange: \"activeIndexChange\",\n      s_afterInit: \"afterInit\",\n      s_autoplay: \"autoplay\",\n      s_autoplayStart: \"autoplayStart\",\n      s_autoplayStop: \"autoplayStop\",\n      s_autoplayPause: \"autoplayPause\",\n      s_autoplayResume: \"autoplayResume\",\n      s_beforeDestroy: \"beforeDestroy\",\n      s_beforeInit: \"beforeInit\",\n      s_beforeLoopFix: \"beforeLoopFix\",\n      s_beforeResize: \"beforeResize\",\n      s_beforeSlideChangeStart: \"beforeSlideChangeStart\",\n      s_beforeTransitionStart: \"beforeTransitionStart\",\n      s_breakpoint: \"breakpoint\",\n      s_changeDirection: \"changeDirection\",\n      s_click: \"click\",\n      s_doubleTap: \"doubleTap\",\n      s_doubleClick: \"doubleClick\",\n      s_destroy: \"destroy\",\n      s_fromEdge: \"fromEdge\",\n      s_hashChange: \"hashChange\",\n      s_hashSet: \"hashSet\",\n      s_imagesReady: \"imagesReady\",\n      s_init: \"init\",\n      s_keyPress: \"keyPress\",\n      s_lazyImageLoad: \"lazyImageLoad\",\n      s_lazyImageReady: \"lazyImageReady\",\n      s_loopFix: \"loopFix\",\n      s_momentumBounce: \"momentumBounce\",\n      s_navigationHide: \"navigationHide\",\n      s_navigationShow: \"navigationShow\",\n      s_navigationPrev: \"navigationPrev\",\n      s_navigationNext: \"navigationNext\",\n      s_observerUpdate: \"observerUpdate\",\n      s_orientationchange: \"orientationchange\",\n      s_paginationHide: \"paginationHide\",\n      s_paginationRender: \"paginationRender\",\n      s_paginationShow: \"paginationShow\",\n      s_paginationUpdate: \"paginationUpdate\",\n      s_progress: \"progress\",\n      s_reachBeginning: \"reachBeginning\",\n      s_reachEnd: \"reachEnd\",\n      s_realIndexChange: \"realIndexChange\",\n      s_resize: \"resize\",\n      s_scroll: \"scroll\",\n      s_scrollbarDragEnd: \"scrollbarDragEnd\",\n      s_scrollbarDragMove: \"scrollbarDragMove\",\n      s_scrollbarDragStart: \"scrollbarDragStart\",\n      s_setTransition: \"setTransition\",\n      s_setTranslate: \"setTranslate\",\n      s_slideChange: \"slideChange\",\n      s_slideChangeTransitionEnd: \"slideChangeTransitionEnd\",\n      s_slideChangeTransitionStart: \"slideChangeTransitionStart\",\n      s_slideNextTransitionEnd: \"slideNextTransitionEnd\",\n      s_slideNextTransitionStart: \"slideNextTransitionStart\",\n      s_slidePrevTransitionEnd: \"slidePrevTransitionEnd\",\n      s_slidePrevTransitionStart: \"slidePrevTransitionStart\",\n      s_slideResetTransitionStart: \"slideResetTransitionStart\",\n      s_slideResetTransitionEnd: \"slideResetTransitionEnd\",\n      s_sliderMove: \"sliderMove\",\n      s_sliderFirstMove: \"sliderFirstMove\",\n      s_slidesLengthChange: \"slidesLengthChange\",\n      s_slidesGridLengthChange: \"slidesGridLengthChange\",\n      s_snapGridLengthChange: \"snapGridLengthChange\",\n      s_snapIndexChange: \"snapIndexChange\",\n      s_tap: \"tap\",\n      s_toEdge: \"toEdge\",\n      s_touchEnd: \"touchEnd\",\n      s_touchMove: \"touchMove\",\n      s_touchMoveOpposite: \"touchMoveOpposite\",\n      s_touchStart: \"touchStart\",\n      s_transitionEnd: \"transitionEnd\",\n      s_transitionStart: \"transitionStart\",\n      s_update: \"update\",\n      s_zoomChange: \"zoomChange\",\n      s_swiper: \"swiper\",\n      s_lock: \"lock\",\n      s_unlock: \"unlock\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c9,\n    decls: 13,\n    vars: 17,\n    consts: [[4, \"ngIf\"], [\"class\", \"swiper-scrollbar\", 4, \"ngIf\"], [\"class\", \"swiper-pagination\", 4, \"ngIf\"], [3, \"ngClass\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"slidesTemplate\", \"\"], [1, \"swiper-button-prev\"], [\"prevElRef\", \"\"], [1, \"swiper-button-next\"], [\"nextElRef\", \"\"], [1, \"swiper-scrollbar\"], [\"scrollbarElRef\", \"\"], [1, \"swiper-pagination\"], [\"paginationElRef\", \"\"], [3, \"ngClass\", \"style\", \"ngSwitch\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\", \"ngSwitch\"], [3, \"ngClass\", 4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function SwiperComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c5);\n        i0.ɵɵprojection(0);\n        i0.ɵɵtemplate(1, SwiperComponent_ng_container_1_Template, 5, 0, \"ng-container\", 0);\n        i0.ɵɵtemplate(2, SwiperComponent_div_2_Template, 2, 0, \"div\", 1);\n        i0.ɵɵtemplate(3, SwiperComponent_div_3_Template, 2, 0, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵprojection(5, 1);\n        i0.ɵɵtemplate(6, SwiperComponent_6_Template, 1, 0, null, 4);\n        i0.ɵɵtemplate(7, SwiperComponent_7_Template, 1, 0, null, 4);\n        i0.ɵɵtemplate(8, SwiperComponent_8_Template, 1, 0, null, 4);\n        i0.ɵɵprojection(9, 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵprojection(10, 3);\n        i0.ɵɵtemplate(11, SwiperComponent_ng_template_11_Template, 2, 3, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r6 = i0.ɵɵreference(12);\n\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.navigation && ctx.showNavigation);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.scrollbar && ctx.showScrollbar);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.pagination && ctx.showPagination);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.wrapperClass);\n        i0.ɵɵattribute(\"id\", ctx.id);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", _r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(11, _c6, ctx.prependSlides));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", _r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(13, _c7, ctx.activeSlides));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", _r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(15, _c8, ctx.appendSlides));\n      }\n    },\n    dependencies: [i1.NgIf, i1.NgClass, i1.NgTemplateOutlet, i1.NgForOf, i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, i1.AsyncPipe],\n    styles: [\"swiper{display:block}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SwiperComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SwiperModule = /*#__PURE__*/(() => {\n  class SwiperModule {}\n\n  SwiperModule.ɵfac = function SwiperModule_Factory(t) {\n    return new (t || SwiperModule)();\n  };\n\n  SwiperModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SwiperModule\n  });\n  SwiperModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return SwiperModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API Surface of angular\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { SwiperComponent, SwiperModule, SwiperSlideDirective }; //# sourceMappingURL=swiper_angular.mjs.map","map":null,"metadata":{},"sourceType":"module"}
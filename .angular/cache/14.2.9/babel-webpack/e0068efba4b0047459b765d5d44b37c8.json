{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Preferences } from '@capacitor/preferences';\nimport * as i0 from \"@angular/core\";\nexport let GestionStorageService = /*#__PURE__*/(() => {\n  class GestionStorageService {\n    constructor() {} // Almacena una cadena de caracteres. Para cada string se necesita un identificador (key) y su valor (value)\n    // Mediante await se indica que es un método asíncrono que devuelve una promesa\n\n\n    setString(key, value) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield Preferences.set({\n          key,\n          value\n        });\n      });\n    } // A partir de su clave identificadora (key) obtiene el valor de una cadena de caracteres almacenada en local\n\n\n    getString(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield Preferences.get({\n          key\n        });\n      });\n    } // Almacena un objeto con formato JSON en local.\n    // Por cada objeto, se necesita una clave (key) y el valor del objeto (value)\n\n\n    setObject(key, value) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield Preferences.set({\n          key,\n          value: JSON.stringify(value)\n        });\n      });\n    } // A partir de su clave obtiene un objeto almacenado en local\n    // Antes de devolverlo, debe ser convertido de formato JSON a formato normal\n\n\n    getObject(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const ret = yield Preferences.get({\n          key\n        });\n        return ret;\n      });\n    } // Dada su clave, elimina un elemento almacenado en local independientemente de su tipo\n\n\n    removeItem(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield Preferences.remove({\n          key\n        });\n      });\n    } // Vacía el almacenamiento local\n\n\n    clear() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield Preferences.clear();\n      });\n    }\n\n  }\n\n  GestionStorageService.ɵfac = function GestionStorageService_Factory(t) {\n    return new (t || GestionStorageService)();\n  };\n\n  GestionStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GestionStorageService,\n    factory: GestionStorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return GestionStorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}
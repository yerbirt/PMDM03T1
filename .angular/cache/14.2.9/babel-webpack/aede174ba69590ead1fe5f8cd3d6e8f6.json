{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { Directory, Filesystem } from '@capacitor/filesystem';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./gestion-storage.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let FotosService = /*#__PURE__*/(() => {\n  class FotosService {\n    // Carga las imágenes que tenemos almacenadas\n    constructor(usarStorage, plataforma) {\n      this.usarStorage = usarStorage;\n      this.plataforma = plataforma; // Array para almacenar las rutas de cada foto\n\n      this.accesoFotos = [];\n      this.loadSaved();\n    } // Devuelve el array para poderlo utilizar en un componente\n\n\n    getFotos() {\n      return this.accesoFotos;\n    } // Recupera las imágenes que hay almacenadas en el disco duro\n\n\n    loadSaved() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Recupera los datos de Storage en formato string\n        const photoList = yield this.usarStorage.getObject(\"fotos\"); // Lo parsea a un array de objetos IFoto y lo almacena en el atributo accesoFotos\n        // Si no obtiene datos inicializará el array para poder empezar a almacenar fotos.\n\n        this.accesoFotos = JSON.parse(photoList.value) || [];\n        console.log(photoList); // En los navegadores debemos cargar las imágenes en formato base64 para que se visualicen correctamente\n\n        if (!this.plataforma.is(\"hybrid\")) {\n          // Lee los datos de cada foto guardada en el sistema de archivos\n          for (let photo of this.accesoFotos) {\n            const readFile = yield Filesystem.readFile({\n              path: photo.filepath,\n              directory: Directory.Data\n            }); // Plataforma web solamente: Guardar la foto en base64 para que se pueda visualizar\n\n            photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n          }\n        }\n      });\n    } // Define las características de la foto y la saca\n\n\n    sacarFoto() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Definir características de la foto\n        let caracteristicasFoto = {\n          resultType: CameraResultType.Uri,\n          source: CameraSource.Camera,\n          quality: 100\n        };\n        const foto = yield Camera.getPhoto(caracteristicasFoto);\n        console.log(foto); // Se obtiene la URL y se añade al principio del array\n        // let UrlFoto: string = foto.webPath;\n        // this.urlFotos.unshift(UrlFoto);\n        // En los dispositivos móviles las fotos se guardan por defecto y tenemos el path físico y el webpath para visualizar\n        // En el navegador hay que guardar la imagen en un fichero y se almacena su path y su URL en el array\n\n        let imagenGuardada;\n\n        if (!this.plataforma.is(\"hybrid\")) {\n          imagenGuardada = yield this.savePicture(foto);\n        } else {\n          // Guarda las rutas de acceso a la foto\n          imagenGuardada = {\n            filepath: foto.path,\n            webviewPath: foto.webPath\n          };\n        }\n\n        this.accesoFotos.unshift(imagenGuardada);\n        console.log(imagenGuardada); // Almacenamos los datos de las fotos en Storage\n\n        this.usarStorage.setObject(\"fotos\", this.accesoFotos);\n      });\n    } // Se almacena la imagen en el sistema de ficheros\n    // Solo para el navegador\n\n\n    savePicture(cameraPhoto) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Convierte la foto al formato base64, exigido por la API del sistema de ficheros\n        const base64Data = yield this.readAsBase64(cameraPhoto); // Guarda el fichero\n\n        const fileName = new Date().getTime() + '.jpeg';\n        const savedFile = yield Filesystem.writeFile({\n          path: fileName,\n          data: base64Data,\n          directory: Directory.Data // Los datos se borrarn al desinstalar la aplicación\n\n        });\n        console.log(savedFile); // Crea y devuelve un objeto IFoto\n\n        return {\n          filepath: fileName,\n          webviewPath: cameraPhoto.webPath\n        };\n      });\n    } // Devuelve la imagen en formato base64 para trabajar en los navegadores\n    // Recupera la imagen como blob y la convierte a base64\n\n\n    readAsBase64(foto) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(foto.webPath);\n        const blob = yield response.blob();\n        const base64 = yield this.convertBlobToBase64(blob);\n        return base64;\n      });\n    } // Conviete una imagen en formato blob a formato base 64\n\n\n    convertBlobToBase64(blob) {\n      let promesa = new Promise(function (resolve, reject) {\n        const reader = new FileReader();\n        reader.onerror = reject;\n\n        reader.onload = () => {\n          resolve(reader.result);\n        };\n\n        reader.readAsDataURL(blob);\n      });\n      return promesa;\n    } // Here's an example of reading a file with a full file path. Use this to\n    // read binary data (base64 encoded) from plugins that return File URIs, such as\n    // the Camera.\n\n\n    readFilePath() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const contents = yield Filesystem.readFile({\n          path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt'\n        });\n        console.log('data:', contents);\n      });\n    }\n\n  }\n\n  FotosService.ɵfac = function FotosService_Factory(t) {\n    return new (t || FotosService)(i0.ɵɵinject(i1.GestionStorageService), i0.ɵɵinject(i2.Platform));\n  };\n\n  FotosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FotosService,\n    factory: FotosService.ɵfac,\n    providedIn: 'root'\n  });\n  return FotosService;\n})();","map":null,"metadata":{},"sourceType":"module"}